import{_ as s,c as a,a as e,o as t}from"./app-Dgm3qbd6.js";const p={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="mobx" tabindex="-1"><a class="header-anchor" href="#mobx"><span>mobx</span></a></h1><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><p>一个简单的例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 1. 封装可观测值</span></span>
<span class="line"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">observable</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 依赖收集，打印 1</span></span>
<span class="line"><span class="token function">autorun</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 推导，触发 derivation 的重新执行，打印 2</span></span>
<span class="line">store<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子就是一个最基础的 MobX 功能，它明显的分为三个步骤：</p><p><strong>1. 封装可观测值</strong>，对其他 MVVM 框架有了解的同学们应该能理解这个过程，这一步的操作的目的是：把一个单纯对象，封装成一个巨复杂的对象。</p><p>这个巨复杂的对象它的学名叫做可观测值（Observable），是 MobX 里第一个重要的概念。</p><p><strong>2. 依赖收集</strong>，第二步使用 autorun 包裹一个回调的操作，学名叫做依赖收集。这里这个打印 a 的回调，MobX 叫它衍生（Derivation），这是 MobX 里第二个重要的概念。但实际上，这里在运行时还暗含了一个步骤，就是封装衍生，衍生本身也是一个巨复杂的对象，在运行 autorun 的时候，会构造出这个对象。</p><p><strong>3. 推导</strong>，第三步给可观测值赋值的行为会触发推导，这是展示 MobX 膜法实力的一步，前面几部的铺垫实际上也是为了这一步而做准备。这里仅仅使用了一行赋值语句，便可以驱动第二步中的衍生函数自动执行，这就是文档里提到的桥接『命令式编程』与『响应式编程』。</p><p>上面的三个步骤还引出了 MobX 的两个核心概念：可观测值和衍生。MobX 的其他概念和行为要么是基于这两个概念实现的，要么是围绕着这两个概念展开的。</p><h2 id="可变数据与不可变数据之争" tabindex="-1"><a class="header-anchor" href="#可变数据与不可变数据之争"><span>可变数据与不可变数据之争</span></a></h2><p>Vue 和 MobX 为代表的可变响应式数据结构，还有 Redux 为代表的不可变数据。</p><p>可变数据的好处对是数据的操作符合习惯，毕竟 JavaScript 并不是一门函数式编程语言。这也使得它在变更不可变数据的时候会比较繁琐，且效率也不高的。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ol><li>https://malcolmyu.github.io/2018/09/09/Core-Concepts-of-Mobx</li><li>https://mp.weixin.qq.com/s/Bp8ZwPx3MatSEjfWSSRJBg</li></ol>`,15)]))}const c=s(p,[["render",o],["__file","mobx.html.vue"]]),r=JSON.parse('{"path":"/blogs/zhuangtaiguanli/mobx.html","title":"mobx","lang":"en-US","frontmatter":{"title":"mobx","date":"2025-02-10T00:00:00.000Z","tags":["状态管理"],"categories":["状态管理"]},"headers":[{"level":2,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[]},{"level":2,"title":"可变数据与不可变数据之争","slug":"可变数据与不可变数据之争","link":"#可变数据与不可变数据之争","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1739202563000,"updatedTime":1739202563000,"contributors":[{"name":"Pcjmy","email":"1716045191@qq.com","commits":1}]},"filePathRelative":"blogs/状态管理/mobx.md"}');export{c as comp,r as data};
