import{_ as a,c as l,a as i,o as n}from"./app-Dgm3qbd6.js";const d={};function t(s,e){return n(),l("div",null,e[0]||(e[0]=[i('<h1 id="vue原理" tabindex="-1"><a class="header-anchor" href="#vue原理"><span>Vue原理</span></a></h1><h2 id="组件化" tabindex="-1"><a class="header-anchor" href="#组件化"><span>组件化</span></a></h2><p>组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。Vue 实现了自己的组件模型，使我们可以在每个组件内封装自定义内容与逻辑。Vue 同样也能很好地配合原生 Web Component。</p><h2 id="响应式" tabindex="-1"><a class="header-anchor" href="#响应式"><span>响应式</span></a></h2><h3 id="什么是响应式" tabindex="-1"><a class="header-anchor" href="#什么是响应式"><span>什么是响应式</span></a></h3><p>组件 data 的数据一旦变化，立即触发视图的更新。</p><h3 id="响应式的实现" tabindex="-1"><a class="header-anchor" href="#响应式的实现"><span>响应式的实现</span></a></h3><p>Vue2 中采用 <code>defineProperty</code> 来劫持整个对象，然后进行深度遍历所有属性，给每个属性添加 <code>getter</code> 和 <code>setter</code>，实现响应式。</p><p>Vue3 采用 <code>proxy</code> 重写了响应式系统，因为 <code>proxy</code> 可以对整个对象进行监听，所以不需要深度遍历</p><ul><li>可以监听动态属性的添加</li><li>可以监听到数组的索引和数组 <code>length</code> 属性</li><li>可以监听删除属性</li></ul><h2 id="vdom和diff" tabindex="-1"><a class="header-anchor" href="#vdom和diff"><span>vdom和diff</span></a></h2><p>虚拟 DOM (Virtual DOM，简称 VDOM) 是一种编程概念，意为将目标所需的 UI 通过数据结构“虚拟”地表示出来，保存在内存中，然后将真实的 DOM 与之保持同步。这个概念是由 React 率先开拓，随后被许多不同的框架采用，当然也包括 Vue。</p><h2 id="模板编译" tabindex="-1"><a class="header-anchor" href="#模板编译"><span>模板编译</span></a></h2><h2 id="渲染过程" tabindex="-1"><a class="header-anchor" href="#渲染过程"><span>渲染过程</span></a></h2><h2 id="前端路由" tabindex="-1"><a class="header-anchor" href="#前端路由"><span>前端路由</span></a></h2>',15)]))}const h=a(d,[["render",t],["__file","Vueyuanli.html.vue"]]),c=JSON.parse('{"path":"/blogs/Vue/2023/Vueyuanli.html","title":"Vue原理","lang":"en-US","frontmatter":{"title":"Vue原理","date":"2023-02-28T00:00:00.000Z","tags":["Vue"],"categories":["Vue"]},"headers":[{"level":2,"title":"组件化","slug":"组件化","link":"#组件化","children":[]},{"level":2,"title":"响应式","slug":"响应式","link":"#响应式","children":[{"level":3,"title":"什么是响应式","slug":"什么是响应式","link":"#什么是响应式","children":[]},{"level":3,"title":"响应式的实现","slug":"响应式的实现","link":"#响应式的实现","children":[]}]},{"level":2,"title":"vdom和diff","slug":"vdom和diff","link":"#vdom和diff","children":[]},{"level":2,"title":"模板编译","slug":"模板编译","link":"#模板编译","children":[]},{"level":2,"title":"渲染过程","slug":"渲染过程","link":"#渲染过程","children":[]},{"level":2,"title":"前端路由","slug":"前端路由","link":"#前端路由","children":[]}],"git":{"createdTime":1677554916000,"updatedTime":1732547723000,"contributors":[{"name":"Pcjmy","email":"1716045191@qq.com","commits":1}]},"filePathRelative":"blogs/Vue/2023/Vue原理.md"}');export{h as comp,c as data};
