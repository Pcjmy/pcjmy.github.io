import{_ as n,c as a,a as e,o as t}from"./app-Dgm3qbd6.js";const p={};function l(c,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="react源码学习-一-createelement、jsx与jsxdev" tabindex="-1"><a class="header-anchor" href="#react源码学习-一-createelement、jsx与jsxdev"><span>React源码学习（一）createElement、jsx与jsxDEV</span></a></h1><p>在 React 中，<code>createElement</code>、<code>jsx</code> 和 <code>jsxDEV</code> 都是创建 React 元素的函数，它们之间的主要区别在于它们的用途和使用环境。每个函数在不同的场景下有特定的作用，通常由编译器（如 Babel）生成，以适应开发和生产环境。</p><h2 id="react-createelement" tabindex="-1"><a class="header-anchor" href="#react-createelement"><span>React.createElement</span></a></h2><p>这是 React 最基础的 API，用于创建 React 元素。React.createElement 是最原始的方式，用于将 JSX 转换为 JavaScript 对象。</p><p><strong>使用场景</strong></p><p>手写 JSX 等效代码：如果不使用 JSX 语法，可以手动调用 createElement 来创建 React 元素。 生产环境：在早期的 React 中，所有的 JSX 最终都会被编译为 React.createElement。</p><p><strong>示例代码</strong></p><p>JSX：</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="line"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, world!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>JSX 编译为 JavaScript：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>React.createElement</code> 参数</p><ul><li>type：元素类型（如 div、h1，或是自定义组件）。</li><li>props：元素的属性对象，包含传递给元素的所有属性（如 id、className 等）。</li><li>children：子元素，作为后续参数传递。</li></ul><p><strong>输出结果</strong></p><p>React.createElement 会返回一个 React 元素对象，如下所示：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;Hello, world!&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">_owner</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">_store</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jsx" tabindex="-1"><a class="header-anchor" href="#jsx"><span>jsx</span></a></h2><p><code>jsx</code> 函数是在 React 17 之后引入的，它用于简化 JSX 的创建流程。相比于 <code>createElement</code>，它更加高效，因为它可以直接创建元素对象，而不需要在内部做复杂的校验。这也是 React 17 之后推荐的用于生产环境的方式。</p><p><strong>使用场景</strong></p><ul><li><strong>生产环境</strong>：React 17 及以后版本，在生产环境中推荐使用 <code>jsx</code>，以减少运行时的开销。</li><li><strong>JSX 自动引入</strong>：React 17 之后引入了 “<strong>JSX 转换的自动化</strong>”，不再需要手动引入 <code>React</code> 来使用 JSX，Babel 自动将 JSX 转换为 <code>jsx</code> 函数调用。</li></ul><p><strong>示例代码</strong></p><p>JSX：</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="line"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, world!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>编译后的代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> jsx <span class="token keyword">as</span> _jsx <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react/jsx-runtime&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">_jsx</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;Hello, world!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>jsx参数</strong></p><ul><li><strong>type</strong>：元素类型。</li><li><strong>props</strong>：元素的属性对象。</li><li><strong>children</strong>：子元素。</li></ul><p><strong>输出结果</strong></p><p>与 <code>createElement</code> 类似，<code>jsx</code> 返回一个 React 元素对象，但它的设计更加高效。</p><h2 id="jsxdev" tabindex="-1"><a class="header-anchor" href="#jsxdev"><span>jsxDEV</span></a></h2><p><code>jsxDEV</code> 是专门为开发环境设计的函数，提供了额外的调试信息（如文件名、行号和列号）。当发生错误时，这些信息可以帮助开发者快速定位问题。</p><p><strong>使用场景</strong></p><ul><li><strong>开发环境</strong>：<code>jsxDEV</code> 只在开发环境中使用，Babel 会将 JSX 编译成 <code>jsxDEV</code>，以提供丰富的调试信息。</li><li><strong>调试信息</strong>：通过包含源文件的元数据（例如文件名、行号、列号），帮助开发者更快地调试。</li></ul><p><strong>示例代码</strong></p><p>JSX：</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="line"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, world!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>开发模式下编译后的代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> jsxDEV <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react/jsx-dev-runtime&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">jsxDEV</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> </span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;Hello, world!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// key</span></span>
<span class="line">  <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// isStaticChildren</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">fileName</span><span class="token operator">:</span> <span class="token string">&#39;src/App.js&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">lineNumber</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">columnNumber</span><span class="token operator">:</span> <span class="token number">13</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 源信息</span></span>
<span class="line">  <span class="token keyword">this</span> <span class="token comment">// self context</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>jsxDEV</code> 参数</strong></p><ul><li><strong>type</strong>：元素类型。</li><li><strong>props</strong>：元素的属性对象。</li><li><strong>key</strong>：元素的 <code>key</code>，用于列表中元素的唯一标识。</li><li><strong>isStaticChildren</strong>：是否是静态子元素。</li><li><strong>source</strong>：调试信息对象，包含文件名、行号、列号。</li><li><strong>self</strong>：上下文信息（通常为 <code>this</code>），用于调试。</li></ul><p><strong>输出结果</strong></p><p><code>jsxDEV</code> 和 <code>jsx</code> 返回类似的 React 元素对象，但 <code>jsxDEV</code> 在返回的对象中包含额外的 <code>_source</code> 和 <code>_self</code> 字段，以便在开发模式下调试时提供更详细的源信息。</p><h2 id="区别总结" tabindex="-1"><a class="header-anchor" href="#区别总结"><span>区别总结</span></a></h2><table><thead><tr><th>函数</th><th>使用场景</th><th>开发/生产</th><th>主要功能</th></tr></thead><tbody><tr><td><code>createElement</code></td><td>手动创建 React 元素或旧版本</td><td>开发和生产</td><td>将 JSX 转换为元素对象，较为通用，但内部校验较多。</td></tr><tr><td><code>jsx</code></td><td>React 17 及以后版本的推荐方式</td><td>生产环境</td><td>更高效的 JSX 创建方式，减少运行时开销，自动引入。</td></tr><tr><td><code>jsxDEV</code></td><td>开发环境</td><td>开发环境</td><td>提供详细的调试信息，如文件名、行号、列号，帮助开发者调试错误。</td></tr></tbody></table><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li><code>React.createElement</code>：基础的 JSX 转换方式，适合早期版本和手动创建 React 元素，运行时性能较低。</li><li><code>jsx</code>：React 17+ 的推荐方式，适合生产环境，运行时性能较好，不再需要显式引入 <code>React</code>。</li><li><code>jsxDEV</code>：用于开发环境，带有调试信息，帮助开发者定位 JSX 所在的文件和位置，方便调试。</li></ul><p>这些函数最终都用于生成 React 元素对象，不同之处在于它们如何处理开发和生产环境中的调试和性能需求。</p>`,47)]))}const i=n(p,[["render",l],["__file","Reactyuanmaxuexi（yi）createElement、jsxyujsxDEV.html.vue"]]),r=JSON.parse('{"path":"/blogs/React/2024/Reactyuanmaxuexi（yi）createElement、jsxyujsxDEV.html","title":"React源码学习（一）createElement、jsx与jsxDEV","lang":"en-US","frontmatter":{"title":"React源码学习（一）createElement、jsx与jsxDEV","date":"2024-11-10T00:00:00.000Z","tags":["React"],"categories":["React"]},"headers":[{"level":2,"title":"React.createElement","slug":"react-createelement","link":"#react-createelement","children":[]},{"level":2,"title":"jsx","slug":"jsx","link":"#jsx","children":[]},{"level":2,"title":"jsxDEV","slug":"jsxdev","link":"#jsxdev","children":[]},{"level":2,"title":"区别总结","slug":"区别总结","link":"#区别总结","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1731229909000,"updatedTime":1731229909000,"contributors":[{"name":"Pcjmy","email":"1716045191@qq.com","commits":1}]},"filePathRelative":"blogs/React/2024/React源码学习（一）createElement、jsx与jsxDEV.md"}');export{i as comp,r as data};
