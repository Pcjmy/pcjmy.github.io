import{_ as l,c,a,b as n,d as e,e as t,o,r as i}from"./app-Dgm3qbd6.js";const r={},u={href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html",target:"_blank",rel:"noopener noreferrer"};function k(m,s){const p=i("ExternalLinkIcon");return o(),c("div",null,[s[3]||(s[3]=a('<h1 id="typescript入门" tabindex="-1"><a class="header-anchor" href="#typescript入门"><span>TypeScript入门</span></a></h1><h2 id="typescript简介" tabindex="-1"><a class="header-anchor" href="#typescript简介"><span>TypeScript简介</span></a></h2><p>TypeScript是由微软开发的开源的编程语言。TypeScript是JavaScript类型的超集，它可以编译成纯JavaScript，TypeScript可以在任何浏览器上运行。TypeScript是一种静态类型检查的语言，提供了类型注解，在代码编译阶段就可以检查出数据类型的错误。</p><p>TypeScprit官网：https://www.typescriptlang.org</p><h2 id="安装typescript" tabindex="-1"><a class="header-anchor" href="#安装typescript"><span>安装TypeScript</span></a></h2><p>使用npm下载TypeScript</p><blockquote><p>npm install -g typescript</p></blockquote><p>查看版本号</p><blockquote><p>tsc -v</p></blockquote><p>编辑器推荐</p>',10)),n("p",null,[n("a",u,[s[0]||(s[0]=e("Visual Studio Code")),t(p)])]),s[4]||(s[4]=a(`<h2 id="第一个typescript程序" tabindex="-1"><a class="header-anchor" href="#第一个typescript程序"><span>第一个TypeScript程序</span></a></h2><p>在Visual Studio Code中新建<code>hello.js</code>文件</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">let</span> message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token operator">=</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>将TypeScript转化为JavaScript代码</p><blockquote><p>tsc hello.ts</p><p>在<code>hello.ts</code>同一目录下会生成<code>hello.js</code>文件</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行<code>hello.js</code>文件</p><blockquote><p>node hello.js</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e7192b863e24598ad33be5da63e945d~tplv-k3u1fbpfcp-watermark.image?" alt="TypeScript.PNG"></p><h2 id="typescript基础类型" tabindex="-1"><a class="header-anchor" href="#typescript基础类型"><span>TypeScript基础类型</span></a></h2><p>TypeScript能够处理的数据类型有：数字、字符串、结构体、布尔值、数组等，TypeScript支持与JavaScript几乎相同的数据类型。TypeScript可以用<code>let</code>或<code>var</code>进行变量声明，在编程时建议用<code>let</code>进行变量声明。</p>`,11)),n("p",null,[s[2]||(s[2]=e("官方文档")),n("a",d,[s[1]||(s[1]=e("https://www.typescriptlang.org/docs/handbook/2/everyday-types.html")),t(p)])]),s[5]||(s[5]=a(`<h3 id="number-数字类型" tabindex="-1"><a class="header-anchor" href="#number-数字类型"><span>Number 数字类型</span></a></h3><p>TypeScript里的所有数字都是浮点数，这些浮点数的类型是 <code>number</code>。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">let</span> count<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="string-字符串类型" tabindex="-1"><a class="header-anchor" href="#string-字符串类型"><span>String 字符串类型</span></a></h3><p>可以用单引号<code>&#39;</code>或双引号<code>&quot;</code>表示字符串</p><p>反引号“\`\`”可以创建一个字符串模板</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">let</span> lang<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;TypeScript&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> month<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;July&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="boolean-布尔值类型" tabindex="-1"><a class="header-anchor" href="#boolean-布尔值类型"><span>boolean 布尔值类型</span></a></h3><p>布尔值有<code>true</code>和<code>false</code>两种取值。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">let</span> flag<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="数组类型" tabindex="-1"><a class="header-anchor" href="#数组类型"><span>数组类型</span></a></h3><p>TypeScript中有两种方式可以定义数组，一种是在元素类型后面加上<code>[]</code>，另一种是使用数组泛型<code>Array&lt;元素类型&gt;</code></p><p>数组中可以存放任意类型的数据</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">let</span> prime<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> even<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元组类型" tabindex="-1"><a class="header-anchor" href="#元组类型"><span>元组类型</span></a></h3><p>元组是固定类型固定长度的数组</p><p>声明一个元组的时候一定要指明类型</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">let</span> person<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="函数类型" tabindex="-1"><a class="header-anchor" href="#函数类型"><span>函数类型</span></a></h3><p>TS可以给函数参数添加类型,&#39;?&#39;表示参数可选</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">let</span> <span class="token function-variable function">log</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>code<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="any" tabindex="-1"><a class="header-anchor" href="#any"><span>Any</span></a></h3><p>如果在编程阶段还不清楚变量的类型，可以使用<code>any</code>类型来标记这些变量。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"></span>
<span class="line"><span class="token keyword">let</span> notSure<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">;</span></span>
<span class="line">notSure <span class="token operator">=</span> <span class="token string">&quot;bytedance&quot;</span><span class="token punctuation">;</span></span>
<span class="line">notSure <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typescript高级类型" tabindex="-1"><a class="header-anchor" href="#typescript高级类型"><span>TypeScript高级类型</span></a></h2><ul><li>union组合类型</li><li>Nullable可空类型</li><li>Literal预定义类型</li></ul><h2 id="class" tabindex="-1"><a class="header-anchor" href="#class"><span>class</span></a></h2><p>TypeScript是面向对象的JavaScript。下面定义了二维平面上的点类，包含了字段、构造函数和方法。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span></span>
<span class="line">    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">coordinate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次实例中使用了<code>new</code>构造了<code>Point</code>类的一个实例，它会调用之前定义的构造函数，创建一个<code>Point</code>类型的新对象，并执行构造函数初始化它。</p><p>转化后的JavaScript代码如下。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> Point <span class="token operator">=</span> <span class="token doc-comment comment">/** <span class="token keyword">@class</span> */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name">Point</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> Point<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="javascript与typescript" tabindex="-1"><a class="header-anchor" href="#javascript与typescript"><span>JavaScript与TypeScript</span></a></h2><p>TypeScript可以使用JavaScript中的所有代码和编码概念，TypeScript是为了使 JavaScript的开发变得更加容易而创建的。在开发大型项目时，使用TypeScript更加合适，如果开发代码量较小的项目，使用JavaScript更加灵活。</p>`,34))])}const b=l(r,[["render",k],["__file","TypeScriptrumen.html.vue"]]),y=JSON.parse('{"path":"/blogs/TypeScript/2022/TypeScriptrumen.html","title":"TypeScript入门","lang":"en-US","frontmatter":{"title":"TypeScript入门","date":"2022-09-30T00:00:00.000Z","tags":["TypeScript"],"categories":["TypeScript"]},"headers":[{"level":2,"title":"TypeScript简介","slug":"typescript简介","link":"#typescript简介","children":[]},{"level":2,"title":"安装TypeScript","slug":"安装typescript","link":"#安装typescript","children":[]},{"level":2,"title":"第一个TypeScript程序","slug":"第一个typescript程序","link":"#第一个typescript程序","children":[]},{"level":2,"title":"TypeScript基础类型","slug":"typescript基础类型","link":"#typescript基础类型","children":[{"level":3,"title":"Number 数字类型","slug":"number-数字类型","link":"#number-数字类型","children":[]},{"level":3,"title":"String 字符串类型","slug":"string-字符串类型","link":"#string-字符串类型","children":[]},{"level":3,"title":"boolean 布尔值类型","slug":"boolean-布尔值类型","link":"#boolean-布尔值类型","children":[]},{"level":3,"title":"数组类型","slug":"数组类型","link":"#数组类型","children":[]},{"level":3,"title":"元组类型","slug":"元组类型","link":"#元组类型","children":[]},{"level":3,"title":"函数类型","slug":"函数类型","link":"#函数类型","children":[]},{"level":3,"title":"Any","slug":"any","link":"#any","children":[]}]},{"level":2,"title":"TypeScript高级类型","slug":"typescript高级类型","link":"#typescript高级类型","children":[]},{"level":2,"title":"class","slug":"class","link":"#class","children":[]},{"level":2,"title":"JavaScript与TypeScript","slug":"javascript与typescript","link":"#javascript与typescript","children":[]}],"git":{"createdTime":1669969201000,"updatedTime":1675940101000,"contributors":[{"name":"Pcjmy","email":"1716045191@qq.com","commits":3}]},"filePathRelative":"blogs/TypeScript/2022/TypeScript入门.md"}');export{b as comp,y as data};
