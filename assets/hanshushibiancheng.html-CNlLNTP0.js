import{_ as n,c as s,a as e,o as l}from"./app-Dgm3qbd6.js";const t={};function i(p,a){return l(),s("div",null,a[0]||(a[0]=[e(`<h1 id="函数式编程" tabindex="-1"><a class="header-anchor" href="#函数式编程"><span>函数式编程</span></a></h1><p>函数式编程是种编程方式，它将电脑运算视为函数的计算。</p><p>函数式编程是面向数学的抽象，将计算描述为一种<strong>表达式求值</strong>，其实，函数式程序就是一个<strong>表达式。</strong></p><p>核心概念：</p><ul><li>数据不可变： 它要求你所有的数据都是不可变的，这意味着如果你想修改一个对象，那你应该创建一个新的对象用来修改，而不是修改已有的对象。</li><li>无状态：主要是强调对于一个函数，不管你何时运行，它都应该像第一次运行一样，给定相同的输入，给出相同的输出，完全不依赖外部状态的变化。</li></ul><p>函数式编程提出函数应该具备的特性：==没有副作用==和==纯函数==。</p><h2 id="函数式编程的特点" tabindex="-1"><a class="header-anchor" href="#函数式编程的特点"><span>函数式编程的特点</span></a></h2><ul><li>函数是&quot;一等公民&quot;</li><li>声明式编程</li><li>惰性执行(不产生无意义的中间变量)</li><li>无状态和数据不可变</li><li>没有副作用</li><li>纯函数(<strong>相同的输入，永远会得到相同的输出</strong>)</li></ul><h2 id="柯里化" tabindex="-1"><a class="header-anchor" href="#柯里化"><span>柯里化</span></a></h2><p>柯里化的意思是将一个多元函数，转换成一个依次调用的<strong>单元函数</strong>。</p><p>柯里化处理的结果刚好就是<strong>单输入</strong>的。</p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="line"><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span> → <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="函数组合" tabindex="-1"><a class="header-anchor" href="#函数组合"><span>函数组合</span></a></h2><p>函数组合的目的是将多个函数组合成一个函数。</p><p>函数组合的好处显而易见，它让代码变得简单而富有可读性，同时通过不同的组合方式，我们可以轻易组合出其他常用函数，让我们的代码更具表现力。</p><p>大型的程序，都可以通过这样一步步的拆分组合实现，而剩下要做的，就是去构造足够多的积木块（函数）。</p><h2 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h2><p>优点：</p><ul><li>代码简洁，开发快速</li><li>接近自然语言，易于理解</li><li>易于&quot;并发编程&quot;</li><li>更少的出错概率</li></ul><p>缺点：</p><ul><li>性能开销</li><li>资源占用</li><li>递归陷阱</li></ul>`,21)]))}const o=n(t,[["render",i],["__file","hanshushibiancheng.html.vue"]]),r=JSON.parse('{"path":"/blogs/JavaScript/2022/hanshushibiancheng.html","title":"函数式编程","lang":"en-US","frontmatter":{"title":"函数式编程","date":"2022-02-12T00:00:00.000Z","tags":["JavaScript"],"categories":["JavaScript"]},"headers":[{"level":2,"title":"函数式编程的特点","slug":"函数式编程的特点","link":"#函数式编程的特点","children":[]},{"level":2,"title":"柯里化","slug":"柯里化","link":"#柯里化","children":[]},{"level":2,"title":"函数组合","slug":"函数组合","link":"#函数组合","children":[]},{"level":2,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]}],"git":{"createdTime":1669891259000,"updatedTime":1669891259000,"contributors":[{"name":"Pcjmy","email":"1716045191@qq.com","commits":1}]},"filePathRelative":"blogs/JavaScript/2022/函数式编程.md"}');export{o as comp,r as data};
