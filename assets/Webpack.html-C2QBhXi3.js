import{_ as p,c as l,a as t,b as s,d as a,e as i,o,r as c}from"./app-Dgm3qbd6.js";const r={},d={href:"https://webpack.js.org/api/cli/#flags",target:"_blank",rel:"noopener noreferrer"};function u(k,n){const e=c("ExternalLinkIcon");return o(),l("div",null,[n[7]||(n[7]=t(`<h1 id="webpack-入门" tabindex="-1"><a class="header-anchor" href="#webpack-入门"><span>Webpack 入门</span></a></h1><h2 id="什么是-webpack" tabindex="-1"><a class="header-anchor" href="#什么是-webpack"><span>什么是 Webpack</span></a></h2><p>Webpack 是静态模块打包器，当 webpack 处理应用程序时，会将所有这些模块打包成一个或多个文件。Webpack 可以处理 js/css/图片、图标字体等单位。</p><p>Webpack 没办法处理动态的内容，只能处理静态的。</p><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><ul><li>entry：指定入口文件</li><li>output：指定输出相关信息</li><li>loader：处理非JS文件的模块</li><li>plugins：执行范围更广的任务</li></ul><h2 id="配置项" tabindex="-1"><a class="header-anchor" href="#配置项"><span>配置项</span></a></h2><h3 id="配置结构" tabindex="-1"><a class="header-anchor" href="#配置结构"><span>配置结构</span></a></h3><p>Webpack 支持单个配置、数组和函数方式配置运行参数，以适配不同场景应用需求，它们之间区别如下：</p><ul><li><strong>单个配置对象</strong>：比较常用的一种方式，逻辑简单，适合大多数业务项目</li><li><strong>配置对象数组</strong>：每个数组项都是一个完整的配置对象，每个对象都会触发一次单独的构建，通常用于需要为同一份代码构建多种产物的场景，如 Library</li><li><strong>函数</strong>：Webpack 启动时会执行该函数获取配置，我们可以在函数中根据环境参数(如 NODE_ENV)动态调整配置对象</li></ul><h3 id="使用配置数组" tabindex="-1"><a class="header-anchor" href="#使用配置数组"><span>使用配置数组</span></a></h3><p>导出数组的方式很简单，如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// webpack.config.js</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 其它配置...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 其它配置...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用数组方式时，Webpack 会在启动后创建多个 <code>Compilation</code> 实例，并行执行构建工作，但需要注意，<code>Compilation</code> 实例间基本上不作通讯，这意味着这种并行构建对运行性能并没有任何正向收益，例如某个 Module 在 <code>Compilation</code> 实例 A 中完成解析、构建后，在其它 <code>Compilation</code> 中依然需要完整经历构建流程，无法直接复用结果。</p><p>数组方式主要用于应对“同一份代码打包出多种产物”的场景，例如在构建 Library 时，我们通常需要同时构建出 ESM/CMD/UMD 等模块方案的产物，如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// webpack.config.js</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;./dist-amd.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;amd&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;amd&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./app.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;./dist-commonjs.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;commonjs&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;commonjs&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./app.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>使用配置数组时，还可以通过 <code>--config-name</code> 参数指定需要构建的配置对象，例如上例配置中若执行 <code>npx webpack --config-name=&#39;amd&#39;</code>，则仅使用数组中 <code>name=&#39;amd&#39;</code> 的项做构建。</p></div><h3 id="使用配置函数" tabindex="-1"><a class="header-anchor" href="#使用配置函数"><span>使用配置函数</span></a></h3><p>配置函数方式要求在配置文件中导出一个函数，并在函数中返回 Webpack 配置对象，或配置数组，或 Promise 对象，如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">env<span class="token punctuation">,</span> argv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 其它配置...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行时，Webpack 会传入两个环境参数对象：</p>`,21)),s("ul",null,[n[6]||(n[6]=s("li",null,[s("code",null,"env"),a("：通过 "),s("code",null,"--env"),a(" 传递的命令行参数，适用于自定义参数")],-1)),s("li",null,[n[1]||(n[1]=s("code",null,"argv",-1)),n[2]||(n[2]=a("：命令行 ")),s("a",d,[n[0]||(n[0]=a("Flags")),i(e)]),n[3]||(n[3]=a(" 参数，支持 ")),n[4]||(n[4]=s("code",null,"entry/output-path/mode/merge",-1)),n[5]||(n[5]=a(" 等"))])])])}const v=p(r,[["render",u],["__file","Webpack.html.vue"]]),b=JSON.parse('{"path":"/blogs/Webpack/2023/Webpack.html","title":"Webpack入门","lang":"en-US","frontmatter":{"title":"Webpack入门","date":"2023-03-01T00:00:00.000Z","tags":["Webpack"],"categories":["Webpack"]},"headers":[{"level":2,"title":"什么是 Webpack","slug":"什么是-webpack","link":"#什么是-webpack","children":[]},{"level":2,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[]},{"level":2,"title":"配置项","slug":"配置项","link":"#配置项","children":[{"level":3,"title":"配置结构","slug":"配置结构","link":"#配置结构","children":[]},{"level":3,"title":"使用配置数组","slug":"使用配置数组","link":"#使用配置数组","children":[]},{"level":3,"title":"使用配置函数","slug":"使用配置函数","link":"#使用配置函数","children":[]}]}],"git":{"createdTime":1704205762000,"updatedTime":1727278188000,"contributors":[{"name":"Pcjmy","email":"1716045191@qq.com","commits":4}]},"filePathRelative":"blogs/Webpack/2023/Webpack.md"}');export{v as comp,b as data};
