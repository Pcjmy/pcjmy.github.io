import{_ as a,c as t,a as n,o as r}from"./app-Dgm3qbd6.js";const o={};function i(l,e){return r(),t("div",null,e[0]||(e[0]=[n('<h1 id="原型和原型链" tabindex="-1"><a class="header-anchor" href="#原型和原型链"><span>原型和原型链</span></a></h1><h2 id="原型" tabindex="-1"><a class="header-anchor" href="#原型"><span>原型</span></a></h2><p><strong>原型</strong>：每个函数都有prototype属性称之为原型因为这个属性的值是个对象，也称为原型对象</p><p>作用：</p><ul><li>存放一些属性和方法</li><li>在JavaScript中实现继承</li></ul><p><strong><strong>proto</strong></strong>:每个对象都有<code>__proto__</code>属性</p><p>作用：这个属性指向它的原型对象</p><p><strong>理解原型对象</strong></p><p>无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个constructor（构造函数）属性，这个属性包含一个指向prototype属性所在函数的指针。</p><h2 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链"><span>原型链</span></a></h2><p>ECMAScript中描述了原型链的概念，并将原型链作为实现继承的主要方法。其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。简单回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>原型：函数都有prototype属性，称之为原型，也称为原型对象</p><ul><li>原型可以放一些属性和方法，共享给实例对象使用</li><li>原型可以做继承</li></ul><p>原型链：对象都有<code>__proto__</code>属性,这个属性指向它的原型对象，原型对象 也是对象,也有<code>__proto__</code>属性，指向原型对象的原型对象，这样一层一层形成的链式结构称为原型链，最顶层找不到则返回null</p>',15)]))}const s=a(o,[["render",i],["__file","yuanxingheyuanxinglian.html.vue"]]),c=JSON.parse('{"path":"/blogs/JavaScript/2021/yuanxingheyuanxinglian.html","title":"原型和原型链","lang":"en-US","frontmatter":{"title":"原型和原型链","date":"2021-11-29T00:00:00.000Z","tags":["JavaScript"],"categories":["JavaScript"]},"headers":[{"level":2,"title":"原型","slug":"原型","link":"#原型","children":[]},{"level":2,"title":"原型链","slug":"原型链","link":"#原型链","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1671032042000,"updatedTime":1671032042000,"contributors":[{"name":"Pcjmy","email":"1716045191@qq.com","commits":1}]},"filePathRelative":"blogs/JavaScript/2021/原型和原型链.md"}');export{s as comp,c as data};
