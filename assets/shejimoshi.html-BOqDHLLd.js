import{_ as s,c as a,a as e,o as t}from"./app-Dgm3qbd6.js";const p={};function l(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式"><span>设计模式</span></a></h1><h2 id="设计原则" tabindex="-1"><a class="header-anchor" href="#设计原则"><span>设计原则</span></a></h2><ul><li>最重要的思想：开放封闭原则</li><li>对扩展开放</li><li>对修改封闭</li></ul><p><strong>SOLID原则</strong></p><ul><li>单一职责原则</li><li>开放封闭原则</li><li>里式替换原则</li><li>接口隔离原则</li><li>依赖倒置原则</li></ul><h2 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式"><span>工厂模式</span></a></h2><ul><li>用一个工厂函数，来创建实例，隐藏new</li><li>如jQuery $ 函数</li><li>如React createElement 函数</li></ul><h2 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式"><span>单例模式</span></a></h2><ul><li>全局唯一的实例（无法生成第二个)</li><li>如Vuex Redux的store</li><li>如全局唯一的dialog modal</li></ul><p>单例模式代码示例：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">SingleTon</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token keyword">static</span> instance<span class="token operator">:</span> SingleTon <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> SingleTon <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">	<span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> s <span class="token operator">=</span> SingleTon<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> s1 <span class="token operator">=</span> SingleTon<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> s2 <span class="token operator">=</span> SingleTon<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>单例模式 - 扩展</strong></p><ul><li>JS是单线程的，创建单例很简单</li><li>Java是支持多线程的，创建单例要考虑锁死线程</li><li>否则多个线程同时创建，单例就重复了(多线程共享进程内存)</li></ul><h2 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式"><span>代理模式</span></a></h2><ul><li>使用者不能直接访问对象，而是访问一个代理层</li><li>在代理层可以监听get set做很多事情</li><li>如ES6 Proxy 实现Vue3响应式</li></ul><h2 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式"><span>观察者模式</span></a></h2><p>观察者模式是一种行为型设计模式，它定义了一种一对多的依赖关系，当一个对象的状态发生改变时，其所有依赖者都会收到通知并自动更新。DOM事件就是一种观察者模式的实现。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 一个主题，一个观察者，主题变化之后触发观察者执行</span></span>
<span class="line">btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="发布订阅" tabindex="-1"><a class="header-anchor" href="#发布订阅"><span>发布订阅</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 绑定</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;event-key&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 事件1</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;event-key&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 事件2</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 触发执行</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;event-key&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>温故知新：绑定的事件要记得解除，防内存泄漏</strong></p><p>观察者模式和发布订阅模式的区别：</p><p>观察者模式</p><ul><li>Subject和Observer直接绑定，没有中间媒介</li></ul><p>发布订阅模式</p><ul><li>Publisher和Observer互不相识，需要中间媒介Event channel</li></ul><h2 id="装饰器模式" tabindex="-1"><a class="header-anchor" href="#装饰器模式"><span>装饰器模式</span></a></h2><ul><li>原功能不变，增加一些新功能(AOP面向切面编程)</li><li>ES和Typescript的 Decorator语法</li><li>类装饰器，方法装饰器</li></ul>`,28)]))}const o=s(p,[["render",l],["__file","shejimoshi.html.vue"]]),u=JSON.parse('{"path":"/blogs/shejimoshi/2022/shejimoshi.html","title":"设计模式","lang":"en-US","frontmatter":{"title":"设计模式","date":"2023-02-28T00:00:00.000Z","tags":["设计模式"],"categories":["设计模式"]},"headers":[{"level":2,"title":"设计原则","slug":"设计原则","link":"#设计原则","children":[]},{"level":2,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[]},{"level":2,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]},{"level":2,"title":"代理模式","slug":"代理模式","link":"#代理模式","children":[]},{"level":2,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":2,"title":"发布订阅","slug":"发布订阅","link":"#发布订阅","children":[]},{"level":2,"title":"装饰器模式","slug":"装饰器模式","link":"#装饰器模式","children":[]}],"git":{"createdTime":1677554916000,"updatedTime":1731843156000,"contributors":[{"name":"Pcjmy","email":"1716045191@qq.com","commits":2}]},"filePathRelative":"blogs/设计模式/2022/设计模式.md"}');export{o as comp,u as data};
