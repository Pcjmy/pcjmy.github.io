import{_ as n,c as a,a as e,o as t}from"./app-Dgm3qbd6.js";const l={};function p(i,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h1><h2 id="什么是正则表达式" tabindex="-1"><a class="header-anchor" href="#什么是正则表达式"><span>什么是正则表达式</span></a></h2><p>正则表达式（regular expression）描述了字符串的“构成模式”，经常被用于检查字符串是否符合预定的格式要求。</p><h2 id="正则表达式的创建" tabindex="-1"><a class="header-anchor" href="#正则表达式的创建"><span>正则表达式的创建</span></a></h2><ul><li>使用/内容/的语法形式，可以快速创建正则表达式</li><li>也可以使用new RegExp(&#39;内容&#39;)的形式，创建正则表达式</li><li>使用typeof运算符检查正则表达式的类型，结果是object</li></ul><p>字符的转义：</p><ul><li>在特殊字符之前的反斜杠<code>\\</code>表示下一个字符不是特殊字符，应该按照字面理解</li><li>不管一个符号有没有特殊意义，都可以在其之前加上一个<code>\\</code>以确保它表达的是这个符号本身</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> regexp1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{6}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> regexp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;^\\\\d{6}$&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠<code>\\</code>）。</p><h2 id="元字符" tabindex="-1"><a class="header-anchor" href="#元字符"><span>元字符</span></a></h2><p>“元字符”是指一位指定类型的字符。</p><table><thead><tr><th>元字符</th><th>功能</th></tr></thead><tbody><tr><td>\\d</td><td>匹配一个数字</td></tr><tr><td>\\D</td><td>匹配一个非数字字符</td></tr><tr><td>\\w</td><td>匹配一个单字字符（字母、数字或者下划线）</td></tr><tr><td>\\W</td><td>匹配一个非单字字符</td></tr><tr><td>\\s</td><td>匹配一个空白字符，包括空格、制表符和换行符</td></tr><tr><td>.</td><td>任意字符</td></tr><tr><td>^</td><td>匹配开头</td></tr><tr><td>$</td><td>匹配结尾</td></tr></tbody></table><h2 id="方括号表示法" tabindex="-1"><a class="header-anchor" href="#方括号表示法"><span>方括号表示法</span></a></h2><ul><li>使用方括号，比如[xyz]，可以创建一个字符集合，表示匹配方括号中的任意字符</li><li>可以使用短横-来指定一个字符范围，^表示否定</li></ul><table><thead><tr><th>元字符</th><th>等价的方括号表示法</th></tr></thead><tbody><tr><td>\\d</td><td>[0-9]</td></tr><tr><td>\\D</td><td>[^0-9]</td></tr><tr><td>\\w</td><td>[A-Za-z0-9_]</td></tr><tr><td>\\W</td><td>[^A-Za-z0-9_]</td></tr></tbody></table><h2 id="量词" tabindex="-1"><a class="header-anchor" href="#量词"><span>量词</span></a></h2><table><thead><tr><th>量词</th><th>意义</th></tr></thead><tbody><tr><td>*</td><td>匹配前一个表达式0次或多次。等价于{0,}</td></tr><tr><td>+</td><td>匹配前面一个表达式1次或者多次。等价于{1,}</td></tr><tr><td>?</td><td>匹配前面一个表达式0次或者1次。等价于{0,1}</td></tr><tr><td>{n}</td><td>n是一个正整数，匹配了前面一个字符刚好出现了n次</td></tr><tr><td>{n,}</td><td>n是一个正整数，匹配前一个字符至少出现了n次</td></tr><tr><td>{n,m}</td><td>n和m都是整数。匹配前面的字符至少n次，最多m次</td></tr></tbody></table><h2 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符"><span>修饰符</span></a></h2><p>修饰符也叫作标志(flags)，用于使用正则表达式实现高级搜索</p><table><thead><tr><th>修饰符</th><th>意义</th></tr></thead><tbody><tr><td>i</td><td>不区分大小写搜索</td></tr><tr><td>g</td><td>全局搜索</td></tr></tbody></table><p>修饰符的使用</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> regexp1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">m</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> regexp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;m&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关方法" tabindex="-1"><a class="header-anchor" href="#相关方法"><span>相关方法</span></a></h2><table><thead><tr><th>方法</th><th>简介</th></tr></thead><tbody><tr><td>test()</td><td>测试某字符串是否匹配正则表达式，返回布尔值</td></tr><tr><td>exec()</td><td>根据正则表达式，在字符串中进行查找，返回结果数组或者null</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;abc123def456ghi789&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span> <span class="token comment">// 这里加g参数后正则表达式是有状态的</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>result <span class="token operator">=</span> regexp<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在字符串中使用正则表达式" tabindex="-1"><a class="header-anchor" href="#在字符串中使用正则表达式"><span>在字符串中使用正则表达式</span></a></h2><table><thead><tr><th>方法</th><th>简介</th></tr></thead><tbody><tr><td>search()</td><td>在字符串中根据正则表达式进行查找匹配，返回首次匹配到的位置索引，测试不到则返回-1</td></tr><tr><td>match()</td><td>在字符串中根据正则表达式进行查找匹配，返回一个数组，找不到则返回null</td></tr><tr><td>replace()</td><td>使用替换字符串替换掉匹配到的子字符串，可以使用正则表达式</td></tr><tr><td>split()</td><td>分隔字符串为数组，可以使用正则表达式</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;abc123def4567&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// search()方法</span></span>
<span class="line"><span class="token keyword">let</span> result1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// match()方法</span></span>
<span class="line"><span class="token keyword">let</span> result2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// replace()方法</span></span>
<span class="line"><span class="token keyword">let</span> result3 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// split()方法</span></span>
<span class="line"><span class="token keyword">let</span> result4 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="正则表达式应用" tabindex="-1"><a class="header-anchor" href="#正则表达式应用"><span>正则表达式应用</span></a></h2><h3 id="_1-手机号中间四位隐藏" tabindex="-1"><a class="header-anchor" href="#_1-手机号中间四位隐藏"><span>1. 手机号中间四位隐藏</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> tel <span class="token operator">=</span> <span class="token string">&#39;12345678901&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\d{3})\\d{4}(\\d{4})$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> str <span class="token operator">=</span> tel<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;$1****$2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-模板解析" tabindex="-1"><a class="header-anchor" href="#_2-模板解析"><span>2. 模板解析</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">let str = &#39;我是{{name}},年龄{{age}},性别{{sex}}&#39;</span>
<span class="line">let person = {</span>
<span class="line">  name: &#39;张三&#39;,</span>
<span class="line">  age: 18,</span>
<span class="line">  sex: &#39;男&#39;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 方式一：使用展开运算符</span>
<span class="line">function compile(template, data) {</span>
<span class="line">  let reg = /\\{\\{([a-z]+)\\}\\}/g</span>
<span class="line">  return template.replace(reg,(...args)=&gt;{</span>
<span class="line">    return data[args[1]]</span>
<span class="line">  })</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 方式二：直接传并且判断path是否还需要替换</span>
<span class="line">function compile(template, data) {</span>
<span class="line">  let reg = /\\{\\{([a-z]+)\\}\\}/g</span>
<span class="line">  return template.replace(reg,(match,path) =&gt; {</span>
<span class="line">    console.log(match,path);</span>
<span class="line">    return path in data ? data[path] : &#39;&#39;</span>
<span class="line">  })</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">// 方式三：使用递归</span>
<span class="line">function compile(template, data) {</span>
<span class="line">  let reg = /{{(\\w+)}}/;</span>
<span class="line">  if (reg.test(template)) {</span>
<span class="line">    let key = reg.exec(template)[1];</span>
<span class="line">    let value = data[key] || &#39;&#39;;</span>
<span class="line">    template = template.replace(reg, value);</span>
<span class="line">    return compile(template, data); // 递归调用</span>
<span class="line">  } else {</span>
<span class="line">    return template;</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">compile(str, person);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-驼峰命名转短横线命名" tabindex="-1"><a class="header-anchor" href="#_3-驼峰命名转短横线命名"><span>3. 驼峰命名转短横线命名</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">styleHyphenFormat</span><span class="token punctuation">(</span><span class="token parameter">propertyName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">upperToHyphenLower</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>offset <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> match<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> propertyName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> upperToHyphenLower<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">styleHyphenFormat</span><span class="token punctuation">(</span><span class="token string">&#39;borderTop&#39;</span><span class="token punctuation">)</span> <span class="token comment">// border-top</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35)]))}const r=n(l,[["render",p],["__file","zhengzebiaodashi.html.vue"]]),o=JSON.parse('{"path":"/blogs/JavaScript/2023/zhengzebiaodashi.html","title":"正则表达式","lang":"en-US","frontmatter":{"title":"正则表达式","date":"2023-12-06T00:00:00.000Z","tags":["JavaScript"],"categories":["JavaScript"]},"headers":[{"level":2,"title":"什么是正则表达式","slug":"什么是正则表达式","link":"#什么是正则表达式","children":[]},{"level":2,"title":"正则表达式的创建","slug":"正则表达式的创建","link":"#正则表达式的创建","children":[]},{"level":2,"title":"元字符","slug":"元字符","link":"#元字符","children":[]},{"level":2,"title":"方括号表示法","slug":"方括号表示法","link":"#方括号表示法","children":[]},{"level":2,"title":"量词","slug":"量词","link":"#量词","children":[]},{"level":2,"title":"修饰符","slug":"修饰符","link":"#修饰符","children":[]},{"level":2,"title":"相关方法","slug":"相关方法","link":"#相关方法","children":[]},{"level":2,"title":"在字符串中使用正则表达式","slug":"在字符串中使用正则表达式","link":"#在字符串中使用正则表达式","children":[]},{"level":2,"title":"正则表达式应用","slug":"正则表达式应用","link":"#正则表达式应用","children":[{"level":3,"title":"1. 手机号中间四位隐藏","slug":"_1-手机号中间四位隐藏","link":"#_1-手机号中间四位隐藏","children":[]},{"level":3,"title":"2. 模板解析","slug":"_2-模板解析","link":"#_2-模板解析","children":[]},{"level":3,"title":"3. 驼峰命名转短横线命名","slug":"_3-驼峰命名转短横线命名","link":"#_3-驼峰命名转短横线命名","children":[]}]}],"git":{"createdTime":1705935245000,"updatedTime":1739031711000,"contributors":[{"name":"Pcjmy","email":"1716045191@qq.com","commits":8}]},"filePathRelative":"blogs/JavaScript/2023/正则表达式.md"}');export{r as comp,o as data};
